// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protobuf/grpc_server.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GrpcServer_Ping_FullMethodName       = "/grpcgo.protobuf.GrpcServer/Ping"
	GrpcServer_ChangePage_FullMethodName = "/grpcgo.protobuf.GrpcServer/ChangePage"
	GrpcServer_AllPages_FullMethodName   = "/grpcgo.protobuf.GrpcServer/AllPages"
)

// GrpcServerClient is the client API for GrpcServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	ChangePage(ctx context.Context, in *ChangePageRequest, opts ...grpc.CallOption) (*ChangePageResponse, error)
	AllPages(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllPagesResponse, error)
}

type grpcServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServerClient(cc grpc.ClientConnInterface) GrpcServerClient {
	return &grpcServerClient{cc}
}

func (c *grpcServerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, GrpcServer_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServerClient) ChangePage(ctx context.Context, in *ChangePageRequest, opts ...grpc.CallOption) (*ChangePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePageResponse)
	err := c.cc.Invoke(ctx, GrpcServer_ChangePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServerClient) AllPages(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AllPagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllPagesResponse)
	err := c.cc.Invoke(ctx, GrpcServer_AllPages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServerServer is the server API for GrpcServer service.
// All implementations must embed UnimplementedGrpcServerServer
// for forward compatibility.
type GrpcServerServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	ChangePage(context.Context, *ChangePageRequest) (*ChangePageResponse, error)
	AllPages(context.Context, *EmptyRequest) (*AllPagesResponse, error)
	mustEmbedUnimplementedGrpcServerServer()
}

// UnimplementedGrpcServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGrpcServerServer struct{}

func (UnimplementedGrpcServerServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGrpcServerServer) ChangePage(context.Context, *ChangePageRequest) (*ChangePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePage not implemented")
}
func (UnimplementedGrpcServerServer) AllPages(context.Context, *EmptyRequest) (*AllPagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPages not implemented")
}
func (UnimplementedGrpcServerServer) mustEmbedUnimplementedGrpcServerServer() {}
func (UnimplementedGrpcServerServer) testEmbeddedByValue()                    {}

// UnsafeGrpcServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServerServer will
// result in compilation errors.
type UnsafeGrpcServerServer interface {
	mustEmbedUnimplementedGrpcServerServer()
}

func RegisterGrpcServerServer(s grpc.ServiceRegistrar, srv GrpcServerServer) {
	// If the following call pancis, it indicates UnimplementedGrpcServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GrpcServer_ServiceDesc, srv)
}

func _GrpcServer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcServer_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServer_ChangePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServer).ChangePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcServer_ChangePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServer).ChangePage(ctx, req.(*ChangePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServer_AllPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServer).AllPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcServer_AllPages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServer).AllPages(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcServer_ServiceDesc is the grpc.ServiceDesc for GrpcServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcgo.protobuf.GrpcServer",
	HandlerType: (*GrpcServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GrpcServer_Ping_Handler,
		},
		{
			MethodName: "ChangePage",
			Handler:    _GrpcServer_ChangePage_Handler,
		},
		{
			MethodName: "AllPages",
			Handler:    _GrpcServer_AllPages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/grpc_server.proto",
}
